#ifndef STATE_H
#define STATE_H

#include "MagicLookUpWhite.hpp"
#include "MagicLookUpBlack.hpp"
#include "Bitboard.hpp"
#include "PositionHistory.hpp"
#include <vector>

class State {
public:
    State();
    State(const Bitboard& black, const Bitboard& white, const Bitboard& king,
        bool whiteTurn, bool whiteWinner = false, bool blackWinner = false);
    State(const Bitboard& black, const Bitboard& white, const Bitboard& king,
        bool whiteTurn, bool whiteWinner = false, bool blackWinner = false, uint64_t zobristHash);
    uint64_t getZobristHash() const;

    bool isWhiteTurn() const;
    Bitboard getBlack() const;
    Bitboard getWhite() const;
    Bitboard getKing() const;
    Bitboard getWhiteAndKing() const;
    Bitboard getPieces() const;

    std::vector<int> getLegalMovesBlack(int from) const;
    std::vector<int> getLegalMovesWhite(int from) const;

    State moveBlack(int from, int to) const;
    State moveWhite(int from, int to) const;

    int getScore() const;
    bool isWhiteWinner() const;
    bool isBlackWinner() const;

private:
    const uint64_t zobristWhiteToMove = 0x1C80317FA3B1799D;
    const uint64_t zobristTable[3][81] = {
        { 0xBDD640FB06671AD1, 0x3EB13B9046685257, 0x23B8C1E9392456DE, 0x1A3D1FA7BC8960A9, 0xBD9C66B3AD3C2D6D, 0x8B9D2434E465E150, 0x972A846916419F82, 0x0822E8F36C031199, 0x17FC695A07A0CA6E, 0x3B8FAA1837F8A88B, 0x9A1DE644815EF6D1, 0x8FADC1A606CB0FB3, 0xB74D0FB132E70629, 0xB38A088CA65ED389, 0x6B65A6A48B8148F6, 0x72FF5D2A386ECBE0, 0x4737819096DA1DAC, 0xDE8A774BCF36D58B, 0xC241330B01A9E71F, 0x28DF6EC4CE4A2BBD, 0x6C307511B2B9437A, 0x47229389571AA876, 0x371ECD7B27CD8130, 0xC37459EEF50BEA63, 0x1A2A73ED562B0F79, 0x6142EA7D17BE3111, 0x5BE6128E18C26797, 0x580D7B71D8F56413, 0x43B7A3A69A8DCA03, 0x0B1F9163CE9FF57F, 0x759CDE66BACFB3D0, 0x1FF49B7889463E85, 0xEC1B8CA1F91E1D4C, 0x142C3FE860E7A113, 0x4B0DBB418D5288F1, 0xA0EE89AED453DD32, 0xE2ACF72F9E574F7A, 0x5C941CF0DC98D2C1, 0x3139D32C93CD59BF, 0x11CE5DD2B45ED1F0, 0xA9488D990BBB2599, 0xC5E7CE8A3A578A8E, 0xFC377A4C4A15544D, 0xDAF61A26146D3F31, 0xDDD1DFB23B982EF8, 0x614FF3D719DB3AD0, 0x7412B29347294739, 0xD58842DEA2BC372F, 0x29A3B2E95D65A441, 0x5AF305535EC42E08, 0xAB9099A435A240AE, 0xB3AA7EFE4458A885, 0xAEFCFAD8EFC89849, 0x12476F57A5E5A5AB, 0xA28DEFE39BF00273, 0x88BD64072BCFBE01, 0x3EABEDCBBAA80DD4, 0x7656AF7229D4BEEF, 0x451B4CF36123FDF7, 0xECE66FA2FD5166E6, 0xB02B61C4A3D70628, 0x3838B3268E944239, 0x5304317FAF42E12F, 0xC4B032CCD7C524A5, 0x0E51F30DC6A7EE39, 0xD261A7AB3AA2E4F9, 0xCE177B4E0837B8A3, 0x66B2BC5B50C187FC, 0x10F1BC81448AAA9E, 0xE9C349E03602F8AC, 0x9132B63EF16287E4, 0xB7C93ACFE059A0EE, 0x366EB16F508EBAD7, 0x7FCD9EB1A7CAD415, 0xE27A984D654821D0, 0xA491F0B2EA1FCA65, 0x24933B83757750A9, 0x23BED01D43CF2FDE, 0xBEB799193F22FAF8, 0x89FA6A688FB5D27B, 0xBF3C4C06434308BC },
        { 0x6DADD6C795A76D79, 0x956269F0E5D7B875, 0x5CABCC97663F1C97, 0xFF50BDE4382567B8, 0x2369B584FF5E9FF0, 0x7E570DDF827050A8, 0xC17AF08A1745D6D8, 0xDC713D960C0FD195, 0x27209BDF1C11F735, 0x28F49481A0A04DC4, 0xAE340454CAC5B68C, 0x98AE43346C12ACE8, 0x62801C4510435A10, 0x988C24C961B1CD22, 0x77D21E02FF01CF99, 0x405CACEC877409A9, 0x8DA0365BF89897B9, 0xF143262FDC5C0EED, 0xAE270DA702F06B90, 0x1D53434BB88139B9, 0xE2817EFDAE849217, 0xC03987108976E334, 0xC4C2E2E3444EA7C8, 0x5715BD6FA4161293, 0x4B22D3081C8EAEE9, 0x287D06CA6F4CC69A, 0x00D4AF5974273CA3, 0xB8DB0672F42D47CC, 0xB83CFE0BE037E5ED, 0xF8CDA88B436D76E2, 0xC30FF46E8026695F, 0x81F76D1C2DBC2134, 0x1B3DBD5CE9A1FA6F, 0xA013AC6EDEDA4E16, 0xD777A4774C66E0A8, 0x81F631D4A39231A7, 0x32EBD6899BE578C7, 0x5FB8D16C2720797D, 0x295B4715C333E861, 0xF4188F3F8A14BE62, 0xEC24A3C5C754108F, 0xEB2263DD87C5421E, 0x99546EB400257AD1, 0x7D15438552FBE43B, 0x1CA35CFB04FC6D82, 0x5CEC4EB5EDD96831, 0xFC3E058BE0F3EAB0, 0xCE88CB2DD4E80839, 0x3D4CBF374EB93EFF, 0x3DA9C2A90ED42F1A, 0x913E4DE2E0C53CB8, 0x14296C07F26B4776, 0xBB5E4BCF15ED6269, 0xD0E6E6607C69DEE1, 0xFA5D310011B7E948, 0x885F6E66C2B6D2C5, 0x2031D750C40DB9B4, 0xA8E56E0C20DE435D, 0xF264ACCC79AC1B1E, 0x2A45C2AB8CBFEDB0, 0x8715A10343DAC043, 0x9B49BD26DF57C59A, 0xF6E07CC06C52C49F, 0xEDCD465E36386821, 0xC1590F538A0F4EFB, 0xB09B2A5CBADCC32A, 0xB683D2E6337EA2DF, 0x66245BFA4FCCA39A, 0xABF3AD39FEC21BBE, 0x5F987C71A65E688E, 0xE64D1BCB702753A1, 0x7394988F847FD9B4, 0x3F76BE1D1EFA2197, 0x1064005C3985C3CF, 0x05628059568CC69B, 0x8DCDCD03969B6662, 0x96A402F23AE8CC93, 0x01D7425638602AB6, 0xB535106E122C9A56, 0x0F1259E0A18FF6B6, 0x114125C63A9BEDD4 },
        { 0x080AADFBE7C99B26, 0x5496F63CDC1110C1, 0x839FBC501223B513, 0x474A493B3CEDDF2D, 0x7C441FE7AB4220A7, 0x8A0B3C3336D8393A, 0xB92DA22B21DF306F, 0xE1E3DB63EF7DDC76, 0x93829B43922FE15A, 0x3E3511287900F7F9, 0x7914C120C8DCD19F, 0x683514F2CEB81F9D, 0x1825BC5430BEB45F, 0xA8B317FA18D0752B, 0x5AB33EDF6E595ED3, 0x693DFFBC6C6FA611, 0xDD2467AC778EEDB3, 0x0DDE29A6BAA4B71A, 0xA748DBCFAC619E63, 0xA56C0941FBF24050, 0x0F844FEF1931E9EE, 0xBA6C34AB6712303A, 0xCCF3A17156DC8907, 0x1BF90E27DC96925E, 0x310C0C003FA7F104, 0x894A05E430B187EF, 0x23E2FCB472D8567D, 0x2EF912766C006F61, 0x766ECB15474EBC19, 0xDFDE4FBF3FF350BF, 0x134C6C92EC5B227C, 0xCEDA8BBB71710434, 0xDB20A56EDC815FE7, 0x19108BE58CE21EA3, 0xA6F2F7B80CF35B58, 0x8A63F881FFD0F9D5, 0x03C72BA8D605E770, 0x17E011B7F8102383, 0xC0E9AB30ED2662E9, 0x3C835DC0D9441FA5, 0x680AC07A2A935D62, 0x7B3A4E3E7C52FA17, 0xDD59BA7136B82481, 0xE7067EF466AA9385, 0x2A25A8880F02BAD0, 0x008D4127610461E3, 0x63F2AE24FC3D3348, 0xED3049CF43E458FC, 0xC8FE3CCDC8B8D9C6, 0x490617F2747B6DBA, 0xB253D2186C4A37EA, 0xBB026576F512C4C3, 0xC88A618EFED4057D, 0xA97065E18E46D534, 0x7C967F79B7E99ACA, 0x309D258C27A0C3D7, 0x37BB3EEC4BF50B52, 0x0EF8C2D6F7FD5646, 0xBC594585944528C0, 0x0F9AEA4B8ACD4E10, 0x504867BABF7B539B, 0x0CD620C20EA2622B, 0x7A0ECFEA958CA9BA, 0xEB5CF46780BACD64, 0x87F7E1FBDA4BD9CA, 0x0E8FA8E0284D82E5, 0x82010C62F5F59B22, 0xD9F195D014822F53, 0x118A9D292F923996, 0x1165E21098543881, 0xDCA02EECACDABACC, 0x675DD5AF3C365296, 0xF10C718B1EB0E38A, 0x91D63F78E3E9DE99, 0x94340A033F07F814, 0x0A2C827E98326856, 0x14FCDD549E8FC965, 0xA8499B926B5252E3, 0x90B2B633956B8C0C, 0x50FD9D3F85D51695, 0x42C18A62EF48E8D5 },
    };

    uint64_t zobristHash;
    Bitboard black;
    Bitboard white;
    Bitboard king;
    bool whiteTurn;
    bool whiteWinner;
    bool blackWinner;

    void computeZobristHash();
    bool capture(const Bitboard& attacker, const Bitboard& defender) const;
};

#endif
